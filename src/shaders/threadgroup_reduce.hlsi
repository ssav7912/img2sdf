
//evil bad hack!
groupshared float2 minmax[8*8];

//bc compiler is buggy and passing groupshared mem makes it trip a race condition false positive,
//we have to declare the groupshared mem in the header file and use it implicitly in the function.
void thread_group_minmax(uint group_thread_id_1d)
{
        //wastes most threads in the warp...
        if (group_thread_id_1d < 32)
        {
            //off-by-one :\
            float minimum = min(minmax[64-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[64-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < 16)
        {
            float minimum = min(minmax[32-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[32-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }

        GroupMemoryBarrierWithGroupSync();


        if (group_thread_id_1d < 8)
        {
            float minimum = min(minmax[16-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[16-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }


        GroupMemoryBarrierWithGroupSync();


        if (group_thread_id_1d < 4)
        {
            float minimum = min(minmax[8-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[8-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < 2)
        {
            float minimum = min(minmax[4-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[4-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }

        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < 1)
        {
            float minimum = min(minmax[2-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[2-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
}