
#include "common.hlsi"
//evil bad hack!
groupshared float2 minmax[GROUP_THREAD_DIM*GROUP_THREAD_DIM];

//bc compiler is buggy and passing groupshared mem makes it trip a race condition false positive,
//we have to declare the groupshared mem in the header file and use it implicitly in the function.
void thread_group_minmax(uint group_thread_id_1d)
{
        const uint shared_mem_size = GROUP_THREAD_DIM * GROUP_THREAD_DIM;



        //wastes most threads in the warp...
        if (group_thread_id_1d < shared_mem_size/2)
        {
            const uint lhs_idx = (shared_mem_size - group_thread_id_1d - 1);

            float minimum = min(minmax[lhs_idx].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[lhs_idx].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < shared_mem_size/4)
        {
            float minimum = min(minmax[(shared_mem_size/2) -group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[(shared_mem_size/2) -group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }

        GroupMemoryBarrierWithGroupSync();


        if (group_thread_id_1d < shared_mem_size/8)
        {
            float minimum = min(minmax[(shared_mem_size/4) -group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[(shared_mem_size/4) -group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }


        GroupMemoryBarrierWithGroupSync();


        if (group_thread_id_1d < shared_mem_size/16)
        {
            float minimum = min(minmax[(shared_mem_size/8) -group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[(shared_mem_size/8) -group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < shared_mem_size/32)
        {
            float minimum = min(minmax[4-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[4-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }

        GroupMemoryBarrierWithGroupSync();

        if (group_thread_id_1d < 1)
        {
            float minimum = min(minmax[2-group_thread_id_1d - 1].x, minmax[group_thread_id_1d].x);
            float maximum = max(minmax[2-group_thread_id_1d - 1].y, minmax[group_thread_id_1d].y);

            minmax[group_thread_id_1d] = float2(minimum, maximum);

        }
}